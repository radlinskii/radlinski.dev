---

---

<div id="theme-select">
    <label>
        <svg
            id="system-mode-icon"
            class="mode-icon"
            width="22px"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
        >
            <path
                id="system-sun"
                fill-rule="evenodd"
                d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zzM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1z"
            ></path>
            <path
                id="system-moon"
                stroke-width="1.5"
                d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3z"
            ></path>
        </svg>
        <svg
            id="dark-mode-icon"
            class="mode-icon"
            width="20px"
            display="none"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
        >
            <path
                id="dark-moon"
                fill-rule="evenodd"
                d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
            ></path>
        </svg>
        <svg
            id="light-mode-icon"
            class="mode-icon"
            width="20px"
            display="none"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
        >
            <path
                id="light-sun"
                fill-rule="evenodd"
                d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
            ></path>
        </svg>
        <select
            value="system"
            id="theme-select-input"
            aria-label="theme select"
        >
            <option value="system">system</option>
            <option value="dark">dark</option>
            <option value="light">light</option>
        </select>
    </label>
</div>

<style>
    label {
        display: flex;
        align-items: center;
    }

    svg {
        margin-right: 8px;
    }

    #theme-select {
        border: 0;
        background: none;
    }

    html[data-theme="dark"] .mode-icon path {
        fill: white;
    }

    html[data-theme="light"] .theme-icon path {
        fill: black;
    }

    html[data-theme="light"] #system-moon {
        stroke: black;
        fill: white;
    }

    html[data-theme="dark"] #system-moon {
        stroke: white;
        fill: black;
    }
</style>

<script is:inline>
    const modeStorageKey = "mode-preference";

    const isDarkSystemThemeMediaQuery = window.matchMedia(
        "(prefers-color-scheme: dark)",
    );

    const isMode = (mode) =>
        mode === "light" || mode === "dark" || mode === "system";

    const getThemeFromMode = (mode) => {
        if (mode === "light") {
            return "light";
        }
        if (mode === "dark") {
            return "dark";
        }
        return isDarkSystemThemeMediaQuery.matches ? "dark" : "light";
    };

    const getPersistedMode = () => {
        return window.localStorage?.getItem(modeStorageKey) || "system";
    };

    const persistMode = (mode) => {
        window.localStorage?.setItem(modeStorageKey, mode);
    };

    const setThemeGlobally = (theme) => {
        document.documentElement.setAttribute("data-theme", theme);
    };

    const reflectModeOnSelectLabel = (mode) => {
        const modeIcons = document.querySelectorAll(".mode-icon");

        modeIcons.forEach((icon) => {
            if (icon.id === `${mode}-mode-icon`) {
                icon.style.display = "block";
            } else {
                icon.style.display = "none";
            }
        });
    };

    const mode = getPersistedMode();
    const theme = getThemeFromMode(mode);

    setThemeGlobally(theme);
    reflectModeOnSelectLabel(mode);
    persistMode(mode);

    function handleSystemThemeChange() {
        const savedMode = getPersistedMode();

        setThemeGlobally(getThemeFromMode(savedMode));
        reflectModeOnSelectLabel(savedMode);
    }

    isDarkSystemThemeMediaQuery.removeEventListener(
        "change",
        handleSystemThemeChange,
    );
    isDarkSystemThemeMediaQuery.addEventListener(
        "change",
        handleSystemThemeChange,
    );

    const themeSelectInput = document.getElementById("theme-select-input");

    const handleThemeSelectInputChange = (event) => {
        if (isMode(event.target.value)) {
            const mode = event.target.value;

            setThemeGlobally(getThemeFromMode(mode));
            reflectModeOnSelectLabel(mode);
            persistMode(mode);
        }
    };

    themeSelectInput.addEventListener("change", handleThemeSelectInputChange);

    themeSelectInput.value = mode;
</script>
